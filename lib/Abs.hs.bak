-- File generated by the BNF Converter (bnfc 2.9.5).

{-# LANGUAGE DeriveTraversable          #-}
{-# LANGUAGE FlexibleInstances          #-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}
{-# LANGUAGE LambdaCase                 #-}
{-# LANGUAGE PatternSynonyms            #-}

-- | The abstract syntax of language .

module Abs where

import qualified Data.String
import           Prelude     (Integer, String)
import qualified Prelude     as C (Eq, Foldable, Functor, Int, Maybe (..), Ord,
                                   Read, Show, Traversable)

type Program = Program' BNFC'Position
data Program' a = Program a [TopDef' a]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type TopDef = TopDef' BNFC'Position
data TopDef' a
    = TDDataV a UIdent [LIdent] [Constructor' a]
    | TDDataNV a UIdent [Constructor' a]
    | TDDeclaration a LIdent (Type' a) (Expr' a)
    | TDDeclarationNT a LIdent (Expr' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Type = Type' BNFC'Position
data Type' a
    = TVar a LIdent
    | TApp a UIdent [Type' a]
    | TType a UIdent
    | TBound a [LIdent] (Type' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Constructor = Constructor' BNFC'Position
data Constructor' a
    = Constructor a UIdent [Type' a] | NullaryConstr a UIdent
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Arg = Arg' BNFC'Position
data Arg' a = Arg a LIdent (Type' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Expr = Expr' BNFC'Position
data Expr' a
    = ELet a (Expr' a) (Type' a) (Expr' a) (Expr' a)
    | ELetNT a (Expr' a) (Expr' a) (Expr' a)
    | EMatch a (Expr' a) [MatchBranch' a]
    | EIf a (Expr' a) (Expr' a) (Expr' a)
    | ELambda a [Arg' a] (Expr' a)
    | EList a [Expr' a]
    | EId a LIdent
    | EConstr a UIdent UIdent
    | EIgnore a
    | EApp a (Expr' a) [Expr' a]
    | ELit a (Literal' a)
    | Neg a (Expr' a)
    | Not a (Expr' a)
    | EMul a (Expr' a) (MulOp' a) (Expr' a)
    | EAdd a (Expr' a) (AddOp' a) (Expr' a)
    | ERel a (Expr' a) (RelOp' a) (Expr' a)
    | EAnd a (Expr' a) (Expr' a)
    | EOr a (Expr' a) (Expr' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type MatchBranch = MatchBranch' BNFC'Position
data MatchBranch' a = MBBranch a (Expr' a) (Expr' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Literal = Literal' BNFC'Position
data Literal' a = LInt a Integer
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type AddOp = AddOp' BNFC'Position
data AddOp' a = Plus a | Minus a
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type MulOp = MulOp' BNFC'Position
data MulOp' a = Times a | Div a | Mod a
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type RelOp = RelOp' BNFC'Position
data RelOp' a = LTH a | LE a | GTH a | GE a | EQU a | NE a
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

newtype LIdent = LIdent String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype UIdent = UIdent String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

-- | Start position (line, column) of something.

type BNFC'Position = C.Maybe (C.Int, C.Int)

pattern BNFC'NoPosition :: BNFC'Position
pattern BNFC'NoPosition = C.Nothing

pattern BNFC'Position :: C.Int -> C.Int -> BNFC'Position
pattern BNFC'Position line col = C.Just (line, col)

-- | Get the start position of something.

class HasPosition a where
  hasPosition :: a -> BNFC'Position

instance HasPosition Program where
  hasPosition = \case
    Program p _ -> p

instance HasPosition TopDef where
  hasPosition = \case
    TDDataV p _ _ _ -> p
    TDDataNV p _ _ -> p
    TDDeclaration p _ _ _ -> p
    TDDeclarationNT p _ _ -> p

instance HasPosition Type where
  hasPosition = \case
    TVar p _ -> p
    TApp p _ _ -> p
    TType p _ -> p
    TBound p _ _ -> p

instance HasPosition Constructor where
  hasPosition = \case
    Constructor p _ _ -> p
    NullaryConstr p _ -> p

instance HasPosition Arg where
  hasPosition = \case
    Arg p _ _ -> p

instance HasPosition Expr where
  hasPosition = \case
    ELet p _ _ _ _ -> p
    ELetNT p _ _ _ -> p
    EMatch p _ _ -> p
    EIf p _ _ _ -> p
    ELambda p _ _ -> p
    EList p _ -> p
    EId p _ -> p
    EConstr p _ _ -> p
    EIgnore p -> p
    EApp p _ _ -> p
    ELit p _ -> p
    Neg p _ -> p
    Not p _ -> p
    EMul p _ _ _ -> p
    EAdd p _ _ _ -> p
    ERel p _ _ _ -> p
    EAnd p _ _ -> p
    EOr p _ _ -> p

instance HasPosition MatchBranch where
  hasPosition = \case
    MBBranch p _ _ -> p

instance HasPosition Literal where
  hasPosition = \case
    LInt p _ -> p

instance HasPosition AddOp where
  hasPosition = \case
    Plus p -> p
    Minus p -> p

instance HasPosition MulOp where
  hasPosition = \case
    Times p -> p
    Div p -> p
    Mod p -> p

instance HasPosition RelOp where
  hasPosition = \case
    LTH p -> p
    LE p -> p
    GTH p -> p
    GE p -> p
    EQU p -> p
    NE p -> p

